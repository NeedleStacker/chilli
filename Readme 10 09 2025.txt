# 🌱 Cher – Sustav za praćenje vlage tla i okoliša

Ovo je moj **Raspberry Pi projekt** za praćenje i automatizaciju uvjeta rasta biljaka.  
Sustav mjeri temperaturu zraka, vlagu zraka, temperaturu tla i vlagu tla, sprema podatke u SQLite bazu i omogućava pregled rezultata preko web sučelja.

---

## 📂 Struktura projekta

cher/
├── logger.py # Glavni logger – pokreće mjerenja u petlji i sprema rezultate u bazu
├── sensors.py # Funkcije za čitanje senzora (DHT22, DS18B20, ADS1115)
├── relays.py # Funkcije za upravljanje relejima (ON/OFF, testiranje)
├── database.py # Inicijalizacija baze i funkcije za čitanje/brisanje podataka
├── config.py # Centralna konfiguracija (GPIO pinovi, putanje, I2C setup)
├── webserver.py # Flask webserver za pregled podataka i kontrolu sustava
├── templates/
│ └── index.html # Glavno web sučelje s grafom, tablicom i kontrolama
├── soil_calibration.json # Kalibracija senzora vlage (dry_v, wet_v u voltima)
├── logger_status.txt # Informacija o stanju loggera (RUNNING since..., PID=...)
├── logger_run.log # Log zapis mjerenja i grešaka loggera
└── sensors.db # SQLite baza s mjerenjima


---

## ⚙️ Funkcionalnosti

- **Logger (`logger.py`)**
  - `run` – pokreće mjerenja u petlji (default svakih 20 min).
  - `run_first` – pokreće mjerenja s punom inicijalizacijom (koristi se kada prvi put pokrećeš logger ili kad želiš "hladni start").
  - Sprema podatke u `sensors.db` i opcionalno snima fotografiju.
  - Piše logove u `logger_run.log` i status (`PID` i vrijeme pokretanja) u `logger_status.txt`.

- **Senzori (`sensors.py`)**
  - `read_ds18b20_temp()` – vraća temperaturu tla.
  - `read_soil_raw_fresh()` – očitava kapacitivni senzor vlage tla (ADS1115) svaki put kao "prvo mjerenje".
  - `read_soil_percent()` – vraća vlagu tla u postocima koristeći kalibraciju u voltima (`dry_v`, `wet_v`).
  - `test_ads()`, `test_dht()`, `test_ds18b20()` – ručno testiranje senzora.
  - `calibrate_ads(dry=True|wet=True)` – spremanje novih kalibracijskih vrijednosti u `soil_calibration.json`.

- **Relays (`relays.py`)**
  - `set_relay_state(relay, state)` – uključivanje/isključivanje releja (LOW-trigger logika).
  - `get_relay_state(relay)` – vraća trenutno stanje releja.
  - `test_relays()` – prolazi kroz ON/OFF kombinacije releja.

- **Baza (`database.py`)**
  - Sprema mjerenja: vrijeme, temp/humidity zraka, temp tla, raw vrijednosti, voltažu i postotak vlage tla.
  - `delete_sql_data(ids, delete_all)` – brisanje zapisa po ID-u, rasponima (3-13) ili brisanje svih zapisa uz potvrdu.
  - `get_sql_data()` – ispis svih zapisa u terminal.

- **Web sučelje (`webserver.py`)**
  - Pregled posljednjih mjerenja u tablici.
  - Graf sa serijama: temperatura zraka, vlaga zraka, temperatura tla i vlaga tla.
  - Ručno čitanje senzora na zahtjev.
  - Upravljanje relejima.
  - Dugmad za pokretanje loggera (`RUN` i `RUN_FIRST`) i pregled logova (`logger_run.log`).
  - Prikaz kada je logger zadnji put pokrenut (`logger_status.txt`).

---

## 🔧 Instalacija

```bash
# 1. Kloniraj projekt ili kopiraj ga na Raspberry Pi
cd ~/cher

# 2. Napravi i aktiviraj virtualno okruženje
python3 -m venv .venv
source .venv/bin/activate

# 3. Instaliraj potrebne pakete
pip install flask adafruit-circuitpython-ads1x15 adafruit-circuitpython-dht RPi.GPIO


🚀 Pokretanje

Logger (background):

python3 logger.py run


ili za hladni start:

python3 logger.py run_first


Webserver:

python3 webserver.py


Zatim otvori u pregledniku:
http://192.168.x.x:5000

🧪 Kalibracija senzora vlage tla

Pusti senzor da se potpuno osuši → pokreni:

python3 logger.py calibrate_ads --dry


Potopi senzor u vodu → pokreni:

python3 logger.py calibrate_ads --wet

🛠 Debug i logovi

Sve greške loggera pišu se u logger_run.log.

Ako logger prestane raditi, provjeri zadnje retke loga:

tail -n 50 logger_run.log

ℹ️ Napomene

ADS1115 se svaki put inicijalizira "fresh" kako bi se izbjeglo čitanje krivih vrijednosti kod više uzastopnih očitanja.

Projekt trenutno koristi Flask development server – za produkciju je preporučljivo pokrenuti preko gunicorn + systemd servisa.

Sve vrijednosti u bazi su zaokružene na 3 decimale (osim RAW vrijednosti koja je integer).